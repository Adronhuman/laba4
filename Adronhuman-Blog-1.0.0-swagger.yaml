openapi: 3.0.0
info:
  version: "1.0.0"
  title: Blog
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Adronhuman/Blog/1.0.0
tags:
  - name: article
    description: operations about articles
  - name: user
    description: Operations about user
  - name: request
    description: operations about edits

paths:

  /article:
    post:
      tags:
        - article
      summary: Add a new article to the blog
      operationId: addArticle
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security: 
        - blog_auth:
          - 'moderator'
      requestBody:
        $ref: '#/components/requestBodies/Article'
  /article/{articleId}:
    get:
      tags:
       - article
      summary: return article by Id
      operationId: getArticleById
      parameters:
        - name: articleId
          in: path
          description: ID of article to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Bad Request 
        '404':
          description: Article not found
      security: []
    post:
      tags:
        - article
      summary: Send request to modify article
      description: This can only be done by the logged in user.
      operationId: modifyArticle
      parameters:
        - name: articleId
          in: path
          description: ID of article that needs to be modified
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - blog_auth: 
          - 'simple_user'
          - 'moderator'
      requestBody:
        $ref: '#/components/requestBodies/Request'
  /request/{articleId}:
    get:
      tags:
       - request
      summary: return all requests by articleId
      description: This can only be done by moderators.
      operationId: getRequestArticleId
      parameters:
        - name: articleId
          in: path
          description: ID of article to show requests
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
            application/xml:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Bad Request 
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - blog_auth: 
          - 'moderator'
    post:
      tags:
       - request
      summary: accepting or rejecting request for modifying
      description: This can only be done by moderators.
      operationId: putRequestAnswer
      parameters:
        - name: articleId
          in: path
          description: ID of article to answer request
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
            application/xml:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Bad Request 
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - blog_auth: 
          - 'moderator'
      requestBody:
        $ref: '#/components/requestBodies/RequestAccept'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author_id:
          type: integer
          format: int32
        text:
          type: string
        create_date:
          type: string
          format: date-time
        last_edit_date:
          type: string
          format: date-time
      xml:
        name: Article
    Request:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type : string
        article_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        DateTimeOfRequest:
          type: string
          format: date-time
        status:
          type: string
          description: Request Status
          enum:
            - accepted
            - rejected
            - waiting
          default: waiting
      xml:
        name: Request
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        role:
          type: string
          description: Role of user
          enum:
            - simple_user
            - moderator
      xml:
        name: User
    
  requestBodies:
    Article:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Article'
        application/xml:
          schema:
            $ref: '#/components/schemas/Article'
      description: Article object to add in blog
      required: true
    Request:
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type : string
            xml:
              name: Request
      description: Article object to add in blog
      required: true
    RequestAccept:
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                description: Request Status
                enum:
                  - rejected
                  - accepted
            xml:
              name: Request
      description: Article object to add in blog
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    blog_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'simple_user': make requests to modify articles
            "moderator" : modify articles and accept changes